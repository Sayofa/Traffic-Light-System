
Traffic Light System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000174  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000769  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b8  00000000  00000000  000009dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000355  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000012ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037b  00000000  00000000  00001350  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018c  00000000  00000000  000016cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001857  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a9 00 	call	0x152	; 0x152 <main>
  64:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initialize_ports>:
void emergency_mode();


void initialize_ports()
	{
		DDRB |= (1 << VEHICLE_GREEN) | (1 << VEHICLE_YELLOW) | (1 << VEHICLE_RED) | (1 << PED_GREEN) | (1 << PED_RED) ;
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	8f 61       	ori	r24, 0x1F	; 31
  70:	87 bb       	out	0x17, r24	; 23
		
		DDRD &= ~((1 << PED_BUTTON) | (1 << EMERGENCY_BUTTON));
  72:	81 b3       	in	r24, 0x11	; 17
  74:	8c 7f       	andi	r24, 0xFC	; 252
  76:	81 bb       	out	0x11, r24	; 17
		PORTD |= (1 << PED_BUTTON) | (1 << EMERGENCY_BUTTON); // Enable internal pull-ups	}
  78:	82 b3       	in	r24, 0x12	; 18
  7a:	83 60       	ori	r24, 0x03	; 3
  7c:	82 bb       	out	0x12, r24	; 18
  7e:	08 95       	ret

00000080 <normal_mode>:
}
	void normal_mode() {
		// Car green, pedestrian red
				PORTB &= ~(1 << VEHICLE_RED);
  80:	88 b3       	in	r24, 0x18	; 24
  82:	8b 7f       	andi	r24, 0xFB	; 251
  84:	88 bb       	out	0x18, r24	; 24

		    PORTB |= (1 << VEHICLE_GREEN) | (1 << PED_RED);
  86:	88 b3       	in	r24, 0x18	; 24
  88:	81 61       	ori	r24, 0x11	; 17
  8a:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	89 e6       	ldi	r24, 0x69	; 105
  90:	98 e1       	ldi	r25, 0x18	; 24
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <normal_mode+0x12>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <normal_mode+0x1c>
  9c:	00 00       	nop
		_delay_ms(500);

		// Car yellow
		PORTB &= ~(1 << VEHICLE_GREEN);
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	8e 7f       	andi	r24, 0xFE	; 254
  a2:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << VEHICLE_YELLOW);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	82 60       	ori	r24, 0x02	; 2
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	83 ec       	ldi	r24, 0xC3	; 195
  ae:	99 e0       	ldi	r25, 0x09	; 9
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <normal_mode+0x30>
  b8:	00 c0       	rjmp	.+0      	; 0xba <normal_mode+0x3a>
  ba:	00 00       	nop
		_delay_ms(200);

		// Car red, pedestrian green
		   PORTB &= ~(1 << VEHICLE_YELLOW | 1 << PED_RED);
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	8d 7e       	andi	r24, 0xED	; 237
  c0:	88 bb       	out	0x18, r24	; 24
		   PORTB |= (1 << VEHICLE_RED) | (1 << PED_GREEN);
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	8c 60       	ori	r24, 0x0C	; 12
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	89 e6       	ldi	r24, 0x69	; 105
  cc:	98 e1       	ldi	r25, 0x18	; 24
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <normal_mode+0x4e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <normal_mode+0x58>
  d8:	00 00       	nop
		_delay_ms(500);

		// Pedestrian red
		PORTB &= ~(1 << PED_GREEN);
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	87 7f       	andi	r24, 0xF7	; 247
  de:	88 bb       	out	0x18, r24	; 24
		PORTB |= (1 << PED_RED);
  e0:	88 b3       	in	r24, 0x18	; 24
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	88 bb       	out	0x18, r24	; 24
  e6:	08 95       	ret

000000e8 <pedestrian_mode>:
	}

	void pedestrian_mode()
	{
		 // Ensure cars are stopped
		 PORTB &= ~((1 << VEHICLE_GREEN) | (1 << VEHICLE_YELLOW));
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	8c 7f       	andi	r24, 0xFC	; 252
  ec:	88 bb       	out	0x18, r24	; 24
		 PORTB |= (1 << VEHICLE_RED);
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	88 bb       	out	0x18, r24	; 24

		 // Allow pedestrians to cross
		 PORTB &= ~(1 << PED_RED);
  f4:	88 b3       	in	r24, 0x18	; 24
  f6:	8f 7e       	andi	r24, 0xEF	; 239
  f8:	88 bb       	out	0x18, r24	; 24
		 PORTB |= (1 << PED_GREEN);
  fa:	88 b3       	in	r24, 0x18	; 24
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	88 bb       	out	0x18, r24	; 24
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	89 e6       	ldi	r24, 0x69	; 105
 104:	98 e1       	ldi	r25, 0x18	; 24
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <pedestrian_mode+0x1e>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <pedestrian_mode+0x28>
 110:	00 00       	nop
		 _delay_ms(500);

		 // Reset lights
		 PORTB &= ~(1 << PED_GREEN);
 112:	88 b3       	in	r24, 0x18	; 24
 114:	87 7f       	andi	r24, 0xF7	; 247
 116:	88 bb       	out	0x18, r24	; 24
		 PORTB |= (1 << PED_RED);
 118:	88 b3       	in	r24, 0x18	; 24
 11a:	80 61       	ori	r24, 0x10	; 16
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	08 95       	ret

00000120 <emergency_mode>:
	 }
	void emergency_mode() {
							 PORTB &= ~((1 << VEHICLE_GREEN) | (1 << VEHICLE_YELLOW) | (1 << VEHICLE_RED) | (1 << PED_RED) | (1 << PED_GREEN));
 120:	88 b3       	in	r24, 0x18	; 24
 122:	80 7e       	andi	r24, 0xE0	; 224
 124:	88 bb       	out	0x18, r24	; 24

		for (int i = 0; i < 10; i++) {
 126:	20 e0       	ldi	r18, 0x00	; 0
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	0f c0       	rjmp	.+30     	; 0x14a <emergency_mode+0x2a>

			PORTB ^= (1 << VEHICLE_RED) | (1 << VEHICLE_YELLOW) | (1 << VEHICLE_GREEN) |
 12c:	98 b3       	in	r25, 0x18	; 24
 12e:	8f e1       	ldi	r24, 0x1F	; 31
 130:	89 27       	eor	r24, r25
 132:	88 bb       	out	0x18, r24	; 24
 134:	4f ef       	ldi	r20, 0xFF	; 255
 136:	85 ea       	ldi	r24, 0xA5	; 165
 138:	9e e0       	ldi	r25, 0x0E	; 14
 13a:	41 50       	subi	r20, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <emergency_mode+0x1a>
 142:	00 c0       	rjmp	.+0      	; 0x144 <emergency_mode+0x24>
 144:	00 00       	nop
		 PORTB |= (1 << PED_RED);
	 }
	void emergency_mode() {
							 PORTB &= ~((1 << VEHICLE_GREEN) | (1 << VEHICLE_YELLOW) | (1 << VEHICLE_RED) | (1 << PED_RED) | (1 << PED_GREEN));

		for (int i = 0; i < 10; i++) {
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	2a 30       	cpi	r18, 0x0A	; 10
 14c:	31 05       	cpc	r19, r1
 14e:	74 f3       	brlt	.-36     	; 0x12c <emergency_mode+0xc>

			PORTB ^= (1 << VEHICLE_RED) | (1 << VEHICLE_YELLOW) | (1 << VEHICLE_GREEN) |
			(1 << PED_RED) | (1 << PED_GREEN);
			_delay_ms(300);
		}
	}
 150:	08 95       	ret

00000152 <main>:


int main(void)
{
    /* Replace with your application code */
	initialize_ports();
 152:	0e 94 36 00 	call	0x6c	; 0x6c <initialize_ports>
	
    while (1) 
    {
		if (!(PIND & (1 << EMERGENCY_BUTTON)))
 156:	81 99       	sbic	0x10, 1	; 16
 158:	03 c0       	rjmp	.+6      	; 0x160 <main+0xe>
		{
			emergency_mode();
 15a:	0e 94 90 00 	call	0x120	; 0x120 <emergency_mode>
 15e:	fb cf       	rjmp	.-10     	; 0x156 <main+0x4>
		}
		
		else if (!(PIND & ( 1<< PED_BUTTON)))
 160:	80 99       	sbic	0x10, 0	; 16
 162:	03 c0       	rjmp	.+6      	; 0x16a <main+0x18>
		{
			pedestrian_mode();
 164:	0e 94 74 00 	call	0xe8	; 0xe8 <pedestrian_mode>
 168:	f6 cf       	rjmp	.-20     	; 0x156 <main+0x4>
		}
		
		else {
			normal_mode();
 16a:	0e 94 40 00 	call	0x80	; 0x80 <normal_mode>
 16e:	f3 cf       	rjmp	.-26     	; 0x156 <main+0x4>

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
